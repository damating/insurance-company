exit
@calculator
@calculator.errors.any?
@calculator.errors
@calculator
exit
EXIT
exit
@calculator.errors.messages
exit
EXIT
@calculator.errors.messages
@calculator.error.messages
@calculator.errors
exit
%("#{contact_name}" <#{my_mail}>)
exit-p
#{email}
%("#{contact_name}" <#{email}>)
exit-p
@resource.is_a?(Contact)
@resource.class
@resource.class.is_a?(Contact) 
@resource.class
@resource.class == "Contact"
@resource.class
@resource
@resouce.class == 'Contact'
exit-p
@resouce
@resouce.class
@resouce.class == "Contact"
@resouce.class == 'Contact'
@resource.class
exit
Calculator.format_date(params[:calculator], "owner_birth").to_date
Calculator.format_date(params[:calculator], "owner_birth")
exit
format_date(params[:calculator], "owner_birth")
exit
calculator_params = params[:calculator].reject { |k,v| k.include?('owner_birth') || k.include?('driving_licence_issue_date') }
calculator_params = params[:calculator].reject { |k,v| k.to_s.include?('owner_birth') || k.to_s.include?('driving_licence_issue_date') }
cal_par
owner_birth = Date.new cal_par["owner_birth(1i)"].to_i, cal_par["owner_birth(2i)"].to_i, cal_par["owner_birth(3i)"].to_i
Calculator.new
owner_birth = Date.new cal_par["owner_birth(1i)"].to_i, cal_par["owner_birth(2i)"].to_i, cal_par["owner_birth(3i)"].to_i
cal_par.owner_birth = Date.new cal_par["owner_birth(1i)"].to_i, cal_par["owner_birth(2i)"].to_i, cal_par["owner_birth(3i)"].to_i
cal_par.owner_birth = Date.new cal_par["owner_birth(1i)"].to_i, event["owner_birth(2i)"].to_i, event["owner_birth(3i)"].to_i
cal_par.owner_birth = Date.new calculator["owner_birth(1i)"].to_i, event["owner_birth(2i)"].to_i, event["owner_birth(3i)"].to_i
cal_par.owner_birth
cal_par = params[:calculator]
exit
calculator = Calculator.new(params[:calculator])
params[:calculator]
params[:calculator].inspect
params[:calculator]
exit
params
exit
params
flash
email
exit
next
flash
exit
flash
dlash
flash.clear
flash.present?
flash.exist?
flash.blank?
flash.nil?
flash[:error]
flash[:notice]
flash
exit
params
flash[:notice].nil?
flash[:notice]
flash.clear
flash[:notice]
exit
flash[:notice]
flash.nil?
flash
flash.clear
flash
exit
flash
flash = nil
flash
exit
